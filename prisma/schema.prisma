generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Desk {
    id        Int      @id @default(autoincrement())
    name      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    cards     Card[]
    sources   Source[]
}

model Card {
    id                  Int                  @id @default(autoincrement())
    deskId              Int
    desk                Desk                 @relation(fields: [deskId], references: [id])
    text                String               @db.Text
    videoUrl            String               @default("")
    imageUrl            String               @default("")
    sourceId            Int?
    source              Source?              @relation(fields: [sourceId], references: [id], onDelete: Restrict)
    lastReviewedAt      DateTime             @default(now())
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    wordMeaningExamples WordMeaningExample[]
}

model WordMeaningExample {
    id            Int      @id @default(autoincrement())
    cardId        Int
    card          Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
    text          String
    cardTextStart Int
    cardTextEnd   Int
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Source {
    id        Int      @id @default(autoincrement())
    deskId    Int
    desk      Desk     @relation(fields: [deskId], references: [id], onDelete: Cascade)
    url       String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    cards     Card[]

    @@unique([deskId, url])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Desk          Desk[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
